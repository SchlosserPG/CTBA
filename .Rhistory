library(tidyverse)
# Create a data frame with original and log-transformed values
df <- data.frame(values = c(2, 4, 10, 20, 30, 50))
# Add a column for log values
df$log_values <- log(df$values)
# Original
ggplot(df, aes(x = values)) +
geom_histogram(bins = 5, fill = "steelblue", color = "white") +
labs(title = "Histogram of Original Values", x = "Values", y = "Frequency")
# Log-transformed
ggplot(df, aes(x = log_values)) +
geom_histogram(bins = 5, fill = "darkgreen", color = "white") +
labs(title = "Histogram of Log-Transformed Values", x = "log(Values)", y = "Frequency")
# Create a data frame with original and log-transformed values
df <- data.frame(values = c(2, 4, 10, 20, 30, 50, 20, 40, 20, 30, 80))
# Add a column for log values
df$log_values <- log(df$values)
# Original
ggplot(df, aes(x = values)) +
geom_histogram(bins = 5, fill = "steelblue", color = "white") +
labs(title = "Histogram of Original Values", x = "Values", y = "Frequency")
# Log-transformed
ggplot(df, aes(x = log_values)) +
geom_histogram(bins = 5, fill = "darkgreen", color = "white") +
labs(title = "Histogram of Log-Transformed Values", x = "log(Values)", y = "Frequency")
library(tidyverse)
# Create a data frame with original and log-transformed values
df <- data.frame(values = c(2, 3, 4, 5, 6, 7, 8, 10, 12, 15,20, 25, 30, 35, 40, 50, 70, 90, 120, 150))
# Add a column for log values
df$log_values <- log(df$values)
# Original
ggplot(df, aes(x = values)) +
geom_histogram(bins = 5, fill = "steelblue", color = "white") +
labs(title = "Histogram of Original Values", x = "Values", y = "Frequency")
# Log-transformed
ggplot(df, aes(x = log_values)) +
geom_histogram(bins = 5, fill = "darkgreen", color = "white") +
labs(title = "Histogram of Log-Transformed Values", x = "log(Values)", y = "Frequency")
# Create a data frame with original and log-transformed values
df <- data.frame(values = c(2, 4, 5, 6, 7, 8, 10, 12, 15, 20, 23, 25, 30, 35, 40, 50, 70, 90, 120, 150))
# Add a column for log values
df$log_values <- log(df$values)
# Original
ggplot(df, aes(x = values)) +
geom_histogram(bins = 5, fill = "steelblue", color = "white") +
labs(title = "Histogram of Original Values", x = "Values", y = "Frequency")
# Log-transformed
ggplot(df, aes(x = log_values)) +
geom_histogram(bins = 5, fill = "darkgreen", color = "white") +
labs(title = "Histogram of Log-Transformed Values", x = "log(Values)", y = "Frequency")
knitr::opts_chunk$set(echo = FALSE, include=FALSE, message=FALSE)
choose(5, 2) #10 combinations
factorial(5)/factorial(5-2) #20 permutations
knitr::opts_chunk$set(echo = FALSE, include=FALSE, message=FALSE)
A <- matrix(c(3, 1, 2,
1, 4, 1,
2, 2, 2),
nrow = 3, byrow = TRUE)
b <- c(12, 10, 18)
solve(A, b)
A <- matrix(c(4, 2,
1, 3),
nrow = 2, byrow = TRUE)
eigen(A)
A <- matrix(c(5, 2,
1, 4),
nrow = 2, byrow = TRUE)
eigen(A)
x <- c(2, 3.5, -1, 4)
magnitude <- sqrt(sum(x^2))
magnitude
A <- c(5, 2)
B <- c(3, -1)
dot_product <- sum(A * B)
dot_product
magnitude_A <- sqrt(sum(A^2))
magnitude_B <- sqrt(sum(B^2))
magnitude_A <- sqrt(sum(A^2)); magnitude_A
magnitude_B <- sqrt(sum(B^2))
magnitude_B <- sqrt(sum(B^2)); magnitude_B
cosine_similarity <- dot_product / (magnitude_A * magnitude_B)
cosine_similarity
A <- matrix(c(2, 0,
1, 3),
nrow = 2, byrow = TRUE)
# Define column vector B
B <- matrix(c(4, 5), nrow = 2, byrow = FALSE)
result
A <- matrix(c(2, 0,
1, 3),
nrow = 2, byrow = TRUE)
# Define column vector B
B <- matrix(c(4, 5), nrow = 2, byrow = FALSE)
# Matrix multiplication
result <- A %*% B
A <- matrix(c(2, 0,
1, 3),
nrow = 2, byrow = TRUE)
result
A <- matrix(c(4, 5,
3, 2,
5, 4),
nrow = 3, byrow = TRUE)
svd_result <- svd(A)
svd_result$d
A <- matrix(c(4, 5,
3, 2,
5, 4),
nrow = 3, byrow = TRUE)
svd_result <- svd(A)
svd_result$d
set.seed(123)
# Simulate data for 10 customers across 4 features
sim_data <- data.frame(
spending = rnorm(10, mean = 500, sd = 50),
visits = rnorm(10, mean = 20, sd = 5),
clicks = rnorm(10, mean = 100, sd = 20),
time_on_site = rnorm(10, mean = 300, sd = 60)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
set.seed(123)
# Simulate data for 100 customers across 4 features
sim_data <- data.frame(
spending = rnorm(100, mean = 500, sd = 50),
visits = rnorm(100, mean = 20, sd = 5),
clicks = rnorm(100, mean = 100, sd = 20),
time_on_site = rnorm(100, mean = 300, sd = 60)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
summary(pca_result)
set.seed(123)
# Simulate data for 100 customers across 4 features
sim_data <- data.frame(
spending = rnorm(50, mean = 500, sd = 50),
visits = rnorm(50, mean = 20, sd = 5),
clicks = rnorm(50, mean = 100, sd = 20),
time_on_site = rnorm(50, mean = 300, sd = 60)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
# Simulate data for 1000 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 50),
visits = rnorm(500, mean = 20, sd = 5),
clicks = rnorm(500, mean = 100, sd = 20),
time_on_site = rnorm(500, mean = 300, sd = 60)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
summary(pca_result)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 5),
clicks = rnorm(500, mean = 100, sd = 20),
time_on_site = rnorm(500, mean = 300, sd = 60)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
summary(pca_result)
set.seed(123)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 50),
clicks = rnorm(500, mean = 100, sd = 25),
time_on_site = rnorm(500, mean = 300, sd = 160)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 50),
clicks = rnorm(500, mean = 100, sd = 25),
time_on_site = rnorm(500, mean = 300, sd = 160)
)
summary(pca_result)
set.seed(123)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 50),
clicks = rnorm(500, mean = 100, sd = 25),
time_on_site = rnorm(500, mean = 300, sd = 160)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 50),
clicks = rnorm(500, mean = 100, sd = 75),
time_on_site = rnorm(500, mean = 300, sd = 160)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
set.seed(123)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 50),
clicks = rnorm(500, mean = 100, sd = 75),
time_on_site = rnorm(500, mean = 300, sd = 160)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
summary(pca_result)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 5),
clicks = rnorm(500, mean = 100, sd = 75),
time_on_site = rnorm(500, mean = 300, sd = 50)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
```{r}
set.seed(123)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 5),
clicks = rnorm(500, mean = 100, sd = 75),
time_on_site = rnorm(500, mean = 300, sd = 50)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
summary(pca_result)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
set.seed(123)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 5),
clicks = rnorm(500, mean = 100, sd = 75),
time_on_site = rnorm(500, mean = 300, sd = 50)
)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
cor(sim_data)
set.seed(123)
# Simulate data for 500 customers across 4 features
sim_data <- data.frame(
spending = rnorm(500, mean = 500, sd = 100),
visits = rnorm(500, mean = 20, sd = 5),
clicks = rnorm(500, mean = 100, sd = 25),
time_on_site = rnorm(500, mean = 300, sd = 50)
)
cor(sim_data)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
set.seed(123)
engagement <- rnorm(500, mean = 0, sd = 1)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 0, 20),
visits = 20 + 5 * engagement + rnorm(500, 0, 2),
clicks = 100 + 25 * engagement + rnorm(500, 0, 5),
time_on_site = 300 + 50 * engagement + rnorm(500, 0, 10)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
set.seed(123)
engagement <- rnorm(500, mean = 20, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 0, 20),
visits = 20 + 5 * engagement + rnorm(500, 0, 200),
clicks = 100 + 25 * engagement + rnorm(500, 0, 50),
time_on_site = 300 + 50 * engagement + rnorm(500, 0, 140)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
set.seed(123)
engagement <- rnorm(500, mean = 20, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 200, 20),
visits = 20 + 5 * engagement + rnorm(500, 30, 200),
clicks = 100 + 25 * engagement + rnorm(500, 10, 50),
time_on_site = 300 + 50 * engagement + rnorm(500, 50, 140)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
set.seed(123)
engagement <- rnorm(500, mean = 20, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 200, 20),
visits = 20 + 5 * engagement + rnorm(500, 30, 140),
clicks = 100 + 25 * engagement + rnorm(500, 10, 50),
time_on_site = 300 + 50 * engagement + rnorm(500, 50, 140)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
set.seed(123)
engagement <- rnorm(500, mean = 0, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 200, 20),
visits = 20 + 5 * engagement + rnorm(500, 30, 140),
clicks = 100 + 25 * engagement + rnorm(500, 10, 50),
time_on_site = 300 + 50 * engagement + rnorm(500, 50, 140)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
set.seed(123)
engagement <- rnorm(500, mean = 0, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 200, 20),
visits = 20 + 5 * engagement + rnorm(500, 30, 140),
clicks = 100 + 25 * engagement + rnorm(500, 10, 50),
time_on_site = 200 + 50 * engagement + rnorm(500, 500, 200)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
set.seed(123)
engagement <- rnorm(500, mean = 0, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 200, 20),
visits = 20 + 5 * engagement + rnorm(500, 30, 140),
clicks = 100 + 25 * engagement + rnorm(500, 10, 50),
time_on_site = 250 + 30 * engagement + rnorm(500, 500, 200)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
set.seed(123)
engagement <- rnorm(500, mean = 0, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 200, 20),
visits = 20 + 5 * engagement + rnorm(500, 30, 140),
clicks = 100 + 25 * engagement + rnorm(500, 10, 50),
time_on_site = 250 + 500 * engagement + rnorm(500, 0, 200)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
set.seed(123)
engagement <- rnorm(500, mean = 0, sd = 25)
# Build features with correlation to engagement
sim_data <- data.frame(
spending = 500 + 100 * engagement + rnorm(500, 200, 20),
visits = 20 + 5 * engagement + rnorm(500, 30, 140),
clicks = 100 + 25 * engagement + rnorm(500, 10, 50),
time_on_site = 250 + rnorm(500, 0, 200)
)
# View correlation matrix
round(cor(sim_data), 2)
cor(sim_data)
# Scale the data
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
write.csv(sim_data, "sim_data.csv")
write.csv(sim_data, "sim_data.csv")
sim_data <- read.csv("data/sim_data.csv")
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
sim_data <- read.csv("data/sim_data.csv")
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
sim_data <- read.csv("data/sim_data.csv")
sim_data_scaled <- scale(sim_data)
# Run PCA
pca_result <- prcomp(sim_data_scaled)
summary(pca_result)
plot(pca_result, type = "l", main = "Scree Plot")
summary(pca_result)
# dot product
3*6+4
18+32
# dot product
3*6+4
# dot product
3*6+4*8
18+32
50
A <- c(3, 4)
B <- c(6,8)
magnitude_A <- sqrt(sum(A^2)); magnitude_A #
A <- c(3, 4)
B <- c(6,8)
magnitude_A <- sqrt(sum(A^2)); magnitude_A #
magnitude_B <- sqrt(sum(B^2)); magnitude_B #3.162
cosine_similarity <- dot_product / (magnitude_A * magnitude_B)
#
dot_product <- 3*6+4*8
18+32
50
A <- c(3, 4)
B <- c(6,8)
magnitude_A <- sqrt(sum(A^2)); magnitude_A #5
magnitude_B <- sqrt(sum(B^2)); magnitude_B #10
cosine_similarity <- dot_product / (magnitude_A * magnitude_B)
#50/(sqrt(25)*sqrt(100))
cosine_similarity #.7633863
knitr::opts_chunk$set(echo = FALSE, include=FALSE, message=FALSE)
A <- matrix(c(3, 1, 2,
1, 4, 1,
2, 2, 2),
nrow = 3, byrow = TRUE)
B <- c(12, 10, 18)
solve(A, B)
A <- matrix(c(5, 2,
1, 4),
nrow = 2, byrow = TRUE)
eigen(A)
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
?len
setwd("C:/Users/pamel/Desktop")
setwd("C:/Users/pamel/Documents/BUAD-CTBA/Code")
reticulate::py_install("dash")
reticulate::py_install("numpy")
reticulate::py_install("beautifulsoup4")
reticulate::py_install("mysql-connector-python")
reticulate::py_install("requests")
reticulate::py_install("shap")
reticulate::py_install("anaconda")
--upgrade pip
upgrade pip
pip install --upgrade pip
-m pip install --upgrade pip
reticulate::py_install("pip")
#### Manual Installation Instructions
#1. Download [this](Swirl.swc) file.
#2. Use install.packages('swirl')
install.packages('swirl')
#3. Run `swirl::install_course()` in the R console.
swirl::install_course()
#3. Run `swirl::install_course()` in the R console.
swirl::install_course()
#4. Select the file you just downloaded.
#5. In console, library(swirl) and click alt enter
library(swirl)
#6. Type swirl() and then follow instructions to activate the swirl course you just downloaded
## **Note: If you have other classes, when it asks if you would like to continue with one of these lessons, you may need to say No. Let me start something new.
swirl()
